# BEFORE DEPLOYMENT:
# ---
# 1. Ensure that the following secrets are defined:
#   * cf_api_key - Global Cloudflare API key.
#   * traefik_dashboard_usersfile - If using Traefik basic auth. Documented at https://doc.traefik.io/traefik/v2.0/middlewares/basicauth/#usersfile
# 2. Ensure that the following environment variables are defined:
#   * TRAEFIK_DASHBOARD_URL - Used for viewing Traefik status. e.g. traefik.contoso.com
#   * PRIMARY_DOMAIN - The primary domain being proxied by Traefik. I need to test if this will work as some kind of list, and then the variable name might change to something like PROXIED_DOMAINS, so keep that in mind.
#   * CF_API_EMAIL - The email associated with the Cloudflare account used to generate the aforementioned Global API key.
#   * REVERSE_PROXY_SUBNET - Internal subnet to use for attaching containers.
#   * HOST_MTU - Host NIC's MTU. Docker does not respect the MTU settings of any NIC on the host; this personally caused a lot of problems for me.
# 3. Create a network with the following options (cannot be deployed from docker-compose alone yet due to Swarm scope) named "proxy"
#   * --driver=bridge
#   * --attachable=true

version: '3.3'

services:
  traefik:
    image: djpic/traefik
    ports:
      - 80:80
      - 443:443
      
    labels:
      - traefik.enable=true
      - traefik.docker.network=proxy

      # Universal https upgrade (use in case cli args fail to work)
      #- traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)
      #- traefik.http.routers.http-catchall.entrypoints=http
      #- traefik.http.routers.http-catchall.middlewares=https-upgrade@docker
      #- traefik.http.middlewares.https-upgrade.redirectscheme.scheme=https
      #- traefik.http.middlewares.https-upgrade.redirectscheme.permanent=true

      # Init dashboard
      - traefik.http.routers.traefik-secure.entrypoints=https
      - traefik.http.routers.traefik-secure.rule=Host(`${TRAEFIK_DASHBOARD_URL}`)
      - traefik.http.routers.traefik-secure.service=api@internal

      # Establish authentication for Traefik dashboard
      - traefik.http.middlewares.admin-auth.basicauth.usersfile=/run/secrets/traefik_dashboard_usersfile
      - traefik.http.routers.traefik-secure.middlewares=admin-auth

      # Define the port inside of the Docker service to use
      - traefik.http.services.proxy.loadbalancer.server.port=8080

      # Automatic container updates
      - com.centurylinklabs.watchtower.enable=true
        
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/traefik:/etc/traefik
      - /var/log/traefik:/var/log/traefik
    command:
      - --providers.docker
      
      # Containers must specifically enable Traefik to use it
      - --providers.docker.exposedbydefault=false
      
      # Define insecure entrypoint and immediately upgrade to secure
      - --entrypoints.http.address=:80
      - --entrypoints.http.http.redirections.entrypoint.to=https
      - --entrypoints.http.http.redirections.entrypoint.scheme=https
      - --entrypoints.http.http.redirections.entrypoint.permanent=true
      
      # Define secure entrypoint with wildcart cert
      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls=true
      - --entrypoints.https.http.tls.certResolver=cloudflare
      - --entrypoints.https.http.tls.domains[0].main=${PRIMARY_DOMAIN}
      - --entrypoints.https.http.tls.domains[0].sans=*.${PRIMARY_DOMAIN}
      
      # Define Cloudflare DNS challenge as primary resolver
      - --certificatesresolvers.cloudflare.acme.email=${LETSENCRYPT_EMAIL}
      - --certificatesresolvers.cloudflare.acme.storage=/etc/traefik/acme.json
      - --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare

      # Enable logging and API/dashboard
      - --accesslog
      - --log
      #- --log.level=DEBUG
      - --log.filePath=/var/log/traefik/traefik.log
      - --api
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CF_API_KEY=${CF_API_KEY}
      - TRAEFIK_DASHBOARD_USERSFILE=${TRAEFIK_DASHBOARD_USERSFILE}
    networks:
      - proxy

# Old config
#networks:
  #proxy:
    #external: true

networks:
  proxy:
    name: proxy
    driver: bridge
    ipam:
      config:
        - subnet: "${REVERSE_PROXY_SUBNET}"
    driver_opts:
      com.docker.network.bridge.name: proxy
      com.docker.network.driver.mtu: ${HOST_MTU}
